{"version":3,"sources":["../../src/components/dataLayer.js"],"names":[],"mappings":"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","file":"dataLayer.js","sourcesContent":["import React from 'react';\nimport {processPoints} from '../utils/utils';\n\nclass DataLayer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.displayName = 'DataLayer';\n        this.state = {\n        \tdata : null\n        }\n\n        this.initDataLayer = this.initDataLayer.bind(this);\n\n        //Prop Checking\n        this.checkPropVisibility = this.checkPropVisibility.bind(this);\n\n        //Style\n        this.styleFeatures = this.styleFeatures.bind(this);\n\n        //Focus\n        this.focus = this.focus.bind(this);\n\n    }\n    /** Focus the map on this dataLayer's features. */\n    focus(){\n        var {maps} = this.props;\n        var bounds = new maps.LatLngBounds();\n        if(this.data) {\n            this.data.forEach((feature)=>{\n                processPoints(feature.getGeometry(), bounds.extend, bounds);\n            });\n            map.fitBounds(bounds);     \n        }\n    }\n    initDataLayer() {\n    \tvar {map, maps} = this.props;\n\n\t\tvar dataOptions = {\n\t\t\tmap\n     \t}\n\n     \tif(this.props.dataOptions)\n     \t\tdataOptions = Object.assign(dataOptions, this.props.dataOptions);\n\n     \tdataOptions = Object.assign(dataOptions, {\n     \t\tstyle : this.styleFeatures,\n     \t})\n\n     \tvar dataLayer = new maps.Data(dataOptions)\n\n     \t//If there is geoJSON, initialize it.\n     \tif(this.props.geoJson) {\n     \t\tvar options = { idPropertyName : '_id' };\n     \t\tif(this.props.idPropertyName)\n     \t\t\toptions.idPropertyName = this.props.idPropertyName;\n\n     \t\tdataLayer.addGeoJson(this.props.geoJson, options);\n     \t}\n\n        // dataLayer.addListener('click', (event) => {\n        //   var {feature} = event;\n        //   var coords = event.latLng.toJSON()\n        //   coords[0] = coords.lng;\n        //   coords[1] = coords.lat;\n\n        //   if(this.props.onClick)\n        //     this.props.onClick({id : feature.getId(), coords });\n\n        // });\n\n     \tthis.setState({ data : dataLayer })\n\n    }\n\n    checkPropVisibility(nextProps) {\n    \tvar {visible} = this.props;\n\n    \tif(!visible && nextProps.visible) {\n    \t\tthis.state.data.setMap(this.props.map);\n    \t}\n    \telse if(visible && !nextProps.visible)\n    \t\tthis.state.data.setMap(null);\n    }\n\n    styleFeatures(feature) {\n    \t//If they passed in a function to completely overide style features, then do so.\n\n    \tif(this.props.styleFeatures)\n    \t\treturn this.props.styleFeatures(feature);\n\n        var geo = feature.getGeometry();\n        var type = null;\n        if(geo)\n            type = geo.getType();\n\n        var visible = feature.getProperty('visible');\n        var zIndex = feature.getProperty('zIndex');\n        var strokeColor = feature.getProperty('strokeColor');\n        var fillColor = feature.getProperty('fillColor');\n        var fillOpacity = this.props.fillOpacity;\n\n        //Do some logic on the options to make things a bit easier.\n        if(!strokeColor)\n        \tstrokeColor = fillColor;\n\n        zIndex = zIndex? zIndex : 10;\n\n        if(this.props.zIndex)\n        \tzIndex = zIndex + (10000 * this.props.zIndex) //TODO: Find a better way to separate out layer zIndexes. Right now we are defautling to 10000K features in a GeoJson schema. It works, but there should be a better way.\n\n        switch(type) {\n        \tcase 'Polygon':\n        \t\tvar polyOptions = {\n        \t\t\tstrokeWeight : 1,\n        \t\t\tstrokeColor,\n        \t\t\tfillColor,\n        \t\t\tfillOpacity\n        \t\t} //Potential Enhancement: Polyoptions could have different defaults. For now, we will leave this.\n        \t\t\n        \t\tif(typeof visible !== 'undefined')\n        \t\t\tpolyOptions.visible = true;\n        \t\tif(typeof zIndex !== 'undefined');\n        \t\t\tpolyOptions.zIndex = zIndex;\n        \t\treturn polyOptions;\n        \tdefault:\n\t        \treturn {}\n        }\n    }\n    componentWillMount() {\n    \tconsole.log(\"DL: componentWillMount\",this.props)\n\t\tif(this.props.maps && this.props.map) {\n\t\t\tthis.initDataLayer();\n\t\t\tthis.checkPropVisibility(this.props);\n\t\t}\n\t\telse\n\t\t\tconsole.error(new Error(\"You must put this compenent in a <Map /> context component or provide the maps and map props manually.\"))\n    }\n    componentWillUnmount() {\n    \tconsole.log(\"DL: componentWillUnmount\");\n    \tthis.state.data.setMap(null);\n    \tthis.setState({data : null})\n    }\n    componentDidUpdate(prevProps, prevState) {\n   \t\tconsole.log(\"DL: componentDidUpdate\", prevProps,prevState);\n    }\n    componentWillReceiveProps(nextProps) {\n    \tconsole.log(\"DL: componentWillReceiveProps\", nextProps, this.props);\n    \tif(typeof nextProps.visible !== 'undefined') {\n\t   \t\tthis.checkPropVisibility(nextProps);\n    \t}\n    }\n   \tshouldComponentUpdate(nextProps, nextState) {\n   \t\tconsole.log(\"DL: shouldComponentUpdate\", nextProps, nextState);\n   \t\treturn true;\n   \t}\n   \tcomponentWillUpdate(nextProps, nextState) {\n   \t    console.log(\"DL: componentWillUpdate\", nextProps, nextState);\n   \t}\n    render() {\n    \tvar children = []\n\n    \tif(this.state.data) {\n\n\t    \tchildren = React.Children.map(this.props.children, child => React.cloneElement(child, {\n\t    \t\tmaps : this.props.maps,\n\t    \t\tmap : this.props.map,\n\t    \t\tdata : this.state.data\n\t    \t}));\n    \t}\n    \tconsole.log(\"Rendered DataLayer\");\n        return <div>{children}</div>;\n    }\n}\n\nDataLayer.propTypes = {\n    maps : React.PropTypes.object,\n    map : React.PropTypes.object,\n    dataOptions : React.PropTypes.object,\n    geoJson : React.PropTypes.object,\n    visible : React.PropTypes.bool,\n    onChange : React.PropTypes.func,\n    styleFeatures : React.PropTypes.func,\n    zIndex : React.PropTypes.number.isRequired,\n    fillOpacity : React.PropTypes.number\n}\n\nexport default DataLayer;\n"]}