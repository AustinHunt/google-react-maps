{"version":3,"sources":["../../src/components/mapControl.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;AACA;;;;;;;;;IASM,U;;;AACF,sBAAY,KAAZ,EAAmB;AAAA;;AAAA,8FACT,KADS;;AAEf,UAAK,WAAL,GAAmB,YAAnB;AACA,UAAK,sBAAL,GAA8B,MAAK,sBAAL,CAA4B,IAA5B,OAA9B;AAHe;AAIlB;;;;6CACwB;AACxB,UAAI,SAAS,mBAAS,WAAT,CAAqB,KAAK,IAAL,CAAU,aAA/B,CAAb;AACA,UAAI,QAAQ,mBAAS,WAAT,CAAqB,KAAK,IAAL,CAAU,eAA/B,CAAZ;AACA,aAAO,WAAP,CAAmB,KAAnB;AACA;;;4CACuB;AAAA,mBACK,KAAK,KADV;AAAA,UAClB,IADkB,UAClB,IADkB;AAAA,UACZ,GADY,UACZ,GADY;AAAA,UACP,QADO,UACP,QADO;;AAEvB,UAAI,WAAW,mBAAS,WAAT,CAAqB,KAAK,IAAL,CAAU,eAA/B,CAAf;AACA,eAAS,KAAT,GAAiB,OAAO,KAAK,KAAL,CAAW,KAAlB,KAA4B,WAA5B,GAA0C,KAAK,KAAL,CAAW,KAArD,GAA6D,CAA9E;;AAEH,UAAG,YAAY,GAAf,EAAmB;AAClB,YAAI,QAAJ,CAAa,KAAK,eAAL,CAAqB,QAArB,CAAb,EAA6C,IAA7C,CAAkD,QAAlD;AACA,OAFD,MAIC,QAAQ,IAAR,CAAa,gEAAb;AACE;;;yCACoB,CAEpB;;;wCACmB;AACnB,WAAK,qBAAL;AACA;;;yCACoB,CACpB;;;2CACsB;AACrB,cAAQ,GAAR,CAAY,uBAAZ;AACI,WAAK,sBAAL;AACL;;;6BACQ;AACL,aAAO;AAAA;AAAA,UAAK,KAAI,eAAT;AAAyB;AAAA;AAAA,YAAK,KAAI,iBAAT;AAA4B,eAAK,KAAL,CAAW;AAAvC;AAAzB,OAAP;AACH;;;;EApCoB,gBAAM,S;;AAuC/B,WAAW,SAAX,GAAuB;AACtB,OAAM,gBAAM,SAAN,CAAgB,MADA;AAEtB,QAAO,gBAAM,SAAN,CAAgB,MAFD;AAGtB,YAAW,gBAAM,SAAN,CAAgB,KAAhB,CAAsB,OAAO,mBAAP,wBAAtB,EAAmE,UAHxD;AAItB,SAAQ,gBAAM,SAAN,CAAgB;AAJF,CAAvB;;kBAOe,U","file":"mapControl.js","sourcesContent":["import React from 'react';\nimport ReactDom from 'react-dom';\nimport {ControlPosition} from '../utils/utils';\n/**\n* The component that defines a custom map control at a predifined position.\n* \n* @property {object} props\n* @property {google.maps.Map} props.map\n* @property {google.maps} props.maps\n* @property {string} props.position\n* @property {number} props.index\n*/\nclass MapControl extends React.Component {\n    constructor(props) {\n        super(props);\n        this.displayName = 'MapControl';\n        this.cleanMapControlContent = this.cleanMapControlContent.bind(this);\n    }\n    cleanMapControlContent() {\n    \tvar parent = ReactDom.findDOMNode(this.refs.controlParent);\n    \tvar child = ReactDom.findDOMNode(this.refs.controlChildren);\n    \tparent.appendChild(child);\n    }\n    loadMapControlContent() {\n    \tvar {maps, map, position} = this.props;\n    \tvar children = ReactDom.findDOMNode(this.refs.controlChildren);\n    \tchildren.index = typeof this.props.index !== 'undefined' ? this.props.index : 1;\n\n\t\tif(position && map){\n\t\t\tmap.controls[maps.ControlPosition[position]].push(children);\n\t\t}\n\t\telse\n\t\t\tconsole.warn(\"You must provide your map control a specific control position.\");\n    }\n    componentWillMount() {\n\n    }\n    componentDidMount() {\n    \tthis.loadMapControlContent();\n    }\n    componentDidUpdate() {\n    }\n    componentWillUnmount() {\n    \t console.log(\"Component unmounting.\")\n          this.cleanMapControlContent();\n    }\n    render() {\n        return <div ref=\"controlParent\"><div ref=\"controlChildren\">{this.props.children}</div></div>;\n    }\n}\n\nMapControl.propTypes = {\n\tmap : React.PropTypes.object,\n\tmaps : React.PropTypes.object,\n\tposition : React.PropTypes.oneOf(Object.getOwnPropertyNames(ControlPosition)).isRequired,\n\tindex : React.PropTypes.number\n}\n\nexport default MapControl;\n"]}