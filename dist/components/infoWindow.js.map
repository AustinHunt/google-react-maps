{"version":3,"sources":["../../src/components/infoWindow.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;IAsBM,U;;;AACF,uBAAY,KAAZ,EAAmB;AAAA;;AAAA,0HACT,KADS;;AAEf,YAAK,WAAL,GAAmB,YAAnB;AACA,YAAK,KAAL,GAAa;AACZ,qBAAa,IADD;AAEZ,iBAAS;AAFG,OAAb;;AAKA,YAAK,qBAAL,GAA6B,MAAK,qBAAL,CAA2B,IAA3B,OAA7B;AACA,YAAK,IAAL,GAAY,IAAZ;AATe;AAUlB;;;;2CACoB;AAAA;;AAAA,sBACgB,KAAK,KADrB;AAAA,aACb,IADa,UACb,IADa;AAAA,aACP,GADO,UACP,GADO;AAAA,aACF,MADE,UACF,MADE;AAAA,aACM,MADN,UACM,MADN;;AAEf,aAAG,QAAQ,GAAX,EAAgB;AACf,gBAAI,UAAU;AACb,yBAAW,SAAQ,SAAR,GAAoB;AADlB,aAAd;AAGA,gBAAI,aAAa,IAAI,KAAK,UAAT,CAAoB,OAApB,CAAjB;AACA,gBAAG,KAAK,KAAL,CAAW,IAAd,EACC,WAAW,IAAX,CAAgB,GAAhB,EAAqB,MAArB,EADD,KAGD,WAAW,KAAX;AACC;AACL,iBAAK,KAAL,CAAW,WAAX,CAAuB,UAAvB,EAAmC,YAAnC,EAAiD,aAAK;AACrD,mBAAG,OAAO,OAAK,KAAL,CAAW,YAAlB,KAAmC,UAAtC,EACC,OAAK,KAAL,CAAW,YAAX,CAAwB,CAAxB;AACD,aAHD;;AAKK,iBAAK,QAAL,CAAc,EAAC,sBAAD,EAAa,cAAb,EAAd;AACA,UAhBD,MAiBK;AACJ,oBAAQ,KAAR,CAAc,6DAAd;AACA;AACN;AACJ;;;;;;8CAG2B;AACvB,aAAG,KAAK,KAAL,CAAW,UAAd,EAA0B;;AAEzB,iBAAK,IAAL,GAAY,mBAAS,WAAT,CAAqB,KAAK,IAAL,CAAU,kBAA/B,CAAZ;AACA,iBAAK,KAAL,CAAW,UAAX,CAAsB,UAAtB,CAAiC,KAAK,IAAtC,EAHyB,CAGoB;AAE7C;AAED;AACD;;;;;;yDAGmC;AAClC;AACE,aAAI,SAAS,mBAAS,WAAT,CAAqB,IAArB,CAAb;AACA,aAAI,QAAQ,KAAK,IAAjB;AACA,gBAAO,WAAP,CAAmB,KAAnB;AACF;;;0CACmB;;AAEnB,cAAK,qBAAL;AACA;;;6CACsB;AACtB,aAAG,KAAK,KAAL,CAAW,UAAd,EACC,KAAK,KAAL,CAAW,UAAX,CAAsB,IAAtB,CAA2B,IAA3B;AACE,cAAK,QAAL,CAAc,EAAC,YAAa,IAAd,EAAd;AACA,cAAK,gCAAL;AAEH;;;yCACkB,S,EAAW,S,EAAW;AACxC,aAAG,KAAK,KAAL,CAAW,UAAd,EAA0B;AACzB,gBAAG,KAAK,KAAL,CAAW,IAAX,IAAmB,CAAC,UAAU,IAAjC,EACG,KAAK,KAAL,CAAW,UAAX,CAAsB,IAAtB,CAA2B,KAAK,KAAL,CAAW,GAAtC,EAA2C,KAAK,KAAL,CAAW,MAAtD,EADH,KAEK,IAAG,CAAC,KAAK,KAAL,CAAW,IAAZ,IAAoB,UAAU,IAAjC,EACJ,KAAK,KAAL,CAAW,UAAX,CAAsB,KAAtB;AACD;;AAED,aAAG,CAAC,KAAK,IAAT,EACC,KAAK,qBAAL;;AATuC,aAWnC,MAXmC,GAWzB,KAAK,KAXoB,CAWnC,MAXmC;;;AAa3C,aAAG,CAAC,UAAU,MAAX,IAAsB,OAAO,GAAP,IAAc,UAAU,MAAV,CAAiB,GAA/B,IAAsC,OAAO,GAAP,IAAc,UAAU,MAAV,CAAiB,GAA9F,EACC,KAAK,KAAL,CAAW,UAAX,CAAsB,WAAtB,CAAkC,KAAK,KAAL,CAAW,MAA7C;AAEE;;;+BACQ;;AAEL,gBAAO;AAAA;AAAA;AAAK;AAAA;AAAA,iBAAK,KAAI,oBAAT;AAA+B,oBAAK,KAAL,CAAW;AAA1C;AAAL,UAAP;AACH;;;;EAvFoB,gBAAM,S;;AA0F/B,WAAW,SAAX,GAAuB;AACtB,SAAO,gBAAM,SAAN,CAAgB,MADD;AAEtB,QAAM,gBAAM,SAAN,CAAgB,MAFA;AAGtB,WAAS,gBAAM,SAAN,CAAgB,KAAhB,CAAsB;AAC9B,WAAM,gBAAM,SAAN,CAAgB,MAAhB,CAAuB,UADC;AAE9B,WAAM,gBAAM,SAAN,CAAgB,MAAhB,CAAuB;AAFC,IAAtB,CAHa;AAOtB,iBAAe,gBAAM,SAAN,CAAgB;AAPT,CAAvB;;kBAUe,U","file":"infoWindow.js","sourcesContent":["import React from 'react';\nimport ReactDom from 'react-dom';\n\n/** The component designed to implement the google.maps.InfoWindow class. This component can be the child of either the `<Map />` or `<Marker />` components, but if you decide to put it within the `<Map />` component you must set its coordinate property so that it has an anchor point.\n* @memberof Map\n* \n* @property {object} props\n* @property {google.maps} props.maps Required.\n* @property {google.maps.Map} props.map Required.\n* @property {google.maps.MVCObject} props.anchor Required if coordinates aren't provided.\n* @property {object} props.coords Required if anchor isn't provided.\n* @property {number} props.coords.lng\n* @property {number} props.coords.lat\n* @property {bool} props.disableAutopan\n* @property {number} props.maxWidth\n* @property {object} props.pixelOffset\n* @property {object} props.pixelOffset.width\n* @property {object} props.pixelOffset.height\n* @property {google.maps.InfoWindowOptions} props.options These will overwrite any of the convenience props above. See [google.maps.InfoWindowOptions]{@link https://developers.google.com/maps/documentation/javascript/3.exp/reference#InfoWindowOptions} documentation for all the options.\n* @property {bool} props.open Allows you to open and close a window without fully unmounting it.\n* @property {object} state\n* @property {google.maps.InfoWindow} state.infoWindow The internal instance of the infoWindow.\n* @property {function} props.onCloseClick Use this to listen for the close click event. When someone tries to close the infowindow. Implement closing.\n*/\n\nclass InfoWindow extends React.Component {\n    constructor(props) {\n        super(props);\n        this.displayName = 'InfoWindow';\n        this.state = {\n        \tinfoWindow : null,\n        \tanchor : null\n        }\n\n        this.loadInfoWindowContent = this.loadInfoWindowContent.bind(this);\n        this.node = null;\n    }\n    componentWillMount() {\n    \t  var {maps, map, anchor, coords} = this.props;\n          if(maps && map) {\n          \tvar options = {\n          \t\tposition : anchor? undefined : coords\n          \t}          \t\n          \tvar infoWindow = new maps.InfoWindow(options)\n          \tif(this.props.open)\n\t          \tinfoWindow.open(map, anchor);\n\t        else\n\t        \tinfoWindow.close()\n          \t//Don't let the infowindow do it's default thing when a user tries to close it.\n    \t\tmaps.event.addListener(infoWindow, 'closeclick', e => {\n\t    \t\tif(typeof this.props.onCloseClick === 'function')\n\t    \t\t\tthis.props.onCloseClick(e);\n    \t\t});\n\n          \tthis.setState({infoWindow, anchor})\n          }\n          else {\n          \tconsole.error(\"InfoWindow must live inside of a <Map /> component context.\")\n          }\n    }\n\t/** Load rendered children into infoWindow.\n\t* @return {undefined} \n\t*/\n    loadInfoWindowContent() {\n    \tif(this.state.infoWindow) {\n\n\t    \tthis.node = ReactDom.findDOMNode(this.refs.infoWindowChildren);\n    \t\tthis.state.infoWindow.setContent(this.node); //Set infowindow content\n\n    \t}\n\n    }\n    /** Place rendered children back into their normal location to await their destruction.\n    * @return {undefined}\n    */\n    cleanInfoWindowContentForUnmount() {\n    \t//Undo our previous dom manipulation.\n      \tvar parent = ReactDom.findDOMNode(this);\n      \tvar child = this.node;\n      \tparent.appendChild(child);\n    }\n    componentDidMount() {\n\n    \tthis.loadInfoWindowContent()\n    }\n    componentWillUnmount() {\n    \tif(this.state.infoWindow)\n\t    \tthis.state.infoWindow.open(null);\n        this.setState({infoWindow : null});\n        this.cleanInfoWindowContentForUnmount();\n\n    }\n    componentDidUpdate(prevProps, prevState) {\n    \tif(this.state.infoWindow) {\n    \t\tif(this.props.open && !prevProps.open)\n\t\t      \tthis.state.infoWindow.open(this.props.map, this.state.anchor);\n\t    \telse if(!this.props.open && prevProps.open)\n\t    \t\tthis.state.infoWindow.close();\n    \t}\n\n    \tif(!this.node)\n\t    \tthis.loadInfoWindowContent();\n    \t\n    \tvar {coords} = this.props;\n\t\t\n\t\tif(!prevProps.coords || (coords.lat != prevProps.coords.lat && coords.lng != prevProps.coords.lng))\n\t\t\tthis.state.infoWindow.setPosition(this.props.coords);\n\n    }\n    render() {\n\n        return <div><div ref=\"infoWindowChildren\">{this.props.children}</div></div>;\n    }\n}\n\nInfoWindow.propTypes = {\n\tmaps : React.PropTypes.object,\n\tmap : React.PropTypes.object,\n\tcoords : React.PropTypes.shape({\n\t\tlat : React.PropTypes.number.isRequired,\n\t\tlng : React.PropTypes.number.isRequired\n\t}),\n\tonCloseClick : React.PropTypes.func\n}\n\nexport default InfoWindow;\n"]}